'''
Events class definining all of the possible State transformations
which define the Edges in the Tree/Graph structure generated by step/time-evolving
the system.


name:       name/id of the transformation to be performed.
is_viable:  "SAT" problem (Is the input for the given Action/Transform "Satisfied"/viable

actions to be taken from the given

is_viable:  Checks whether the given state would permit such an action:
            ex: if required resources are met, action is viable
            If required resources are not met, action is not viable

apply:      "Pure" function taking in a given World State, and applies
            the underlying "Action" resulting in a new World State.

'''

from abc import ABC, abstractmethod
from models import WorldState

# Uses abstract methods as a means to express some static polymorphism/Inheritence


class Action(ABC):

    name: str

    @abstractmethod
    def is_viable(self) -> bool:
        return False

    @abstractmethod
    def apply(self) -> WorldState:
        return WorldState()


class Transform(Action):

    def is_viable(self) -> bool:
        return False

    def apply(self) -> WorldState:
        return WorldState()
